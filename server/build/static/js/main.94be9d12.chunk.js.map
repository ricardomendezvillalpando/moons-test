{"version":3,"sources":["components/Header/Header.module.css","components/Main/Main.module.css","components/Landing/Landing.module.css","components/Chat/Chat.module.css","components/Dashboard/Dashboard.module.css","components/ChatDetail/ChatDetail.module.css","moons.svg","components/Landing/Landing.js","components/Chat/Chat.js","components/Dashboard/Dashboard.js","components/ChatDetail/ChatDetail.js","components/Main/Main.js","components/Header/Header.js","App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["module","exports","Landing","Container","className","styles","Row","Col","xs","md","lg","options","animationData","animation","defaultProps","transports","Chat","uri","ListGroup","Item","to","name","size","round","Dashboard","Card","Body","Title","Text","Button","variant","ChatDetail","Nav","Link","href","Form","inline","Label","htmlFor","srOnly","Control","id","placeholder","type","Main","exact","path","component","Header","Navbar","fixed","bg","expand","Brand","src","moons","alt","Toggle","aria-controls","Collapse","App","justify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94be9d12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2C_Ub\",\"navbar-nav\":\"Header_navbar-nav__3Gl5W\",\"nav-link\":\"Header_nav-link__pB9ol\",\"link\":\"Header_link__2wI74\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__CYWXU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Landing\":\"Landing_Landing__3WE0r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chat\":\"Chat_Chat__3NjUX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dashboard\":\"Dashboard_Dashboard__jFBog\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatDetail\":\"ChatDetail_ChatDetail__2aUwi\"};","module.exports = __webpack_public_path__ + \"static/media/moons.e292d61b.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Landing.module.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Lottie from 'lottie-react-web'\nimport animation from '../../welcome.json';\n\nconst Landing = () => (\n  \n    <Container className={styles.Landing}>    \n    <Row>\n    \n      <Col>\n      <h1>About Test</h1> \n      <p>This App contains the followin three routes (components):</p>\n      <ol>\n        <li>/ (Landing component)</li>\n        <li>/chat (Chat component)</li>\n        <li>/dashboard (Dashboard component)</li>\n      </ol>\n      <h3>Client Side:</h3>  \n        <ul>\n            <li>React</li>\n        </ul>\n        <h3>\n          Server Side:\n        </h3> \n        <ul>\n            <li>NodeJs</li>\n            <li>Express</li>\n            <li>Socket IO (Real time communication) </li>\n        </ul>\n\n        <h5>\n          Version Control:\n        </h5> \n        <ul>\n            <li>Git</li>            \n        </ul>\n\n        <h5>\n          Infrastructure:\n        </h5> \n        <ul>\n            <li>Heroku</li>            \n        </ul>\n      </Col>\n      <Col xs={12} md={6} lg={6}>\n      <Lottie\n        \n          options={{\n            animationData: animation,\n            \n          }}\n        />\n      </Col>\n      \n    </Row>\n    <Row>\n      \n      \n      \n    </Row>    \n    <Row>\n      \n      <Col>\n                         \n        \n     \n      </Col>\n    </Row>\n</Container>  \n);\n\nLanding.propTypes = {};\n\nLanding.defaultProps = {};\n\nexport default Landing;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col, ListGroup, Media, Form, Button, InputGroup, FormControl, Image} from 'react-bootstrap';\nimport Avatar from 'react-avatar';\nimport styles from './Chat.module.css';\nimport { Socket } from 'react-socket-io';\n\nconst uri = 'http://localhost:8080';\nconst options = { transports: ['websocket'] };\n\nconst name = 'Josh Perez';\n\nconst Chat = () => (\n  <Socket uri={uri} options={options}> \n  <Container className={styles.Chat}>\n  \n               \n    <Row>\n      \n      <Col xs={12}>\n        <h6>Connected User(s)</h6> \n        Hello, {name} \n        \n        <ListGroup>\n          <ListGroup.Item>   \n            <NavLink to='/chat/90'>\n              <Avatar name=\"Ricardo Mendez\" size=\"40\" round={true} />\n              Ricardo Mendez  \n            </NavLink>                                         \n          </ListGroup.Item> \n\n          <ListGroup.Item>   \n            <NavLink to='/chat/80'>\n              <Avatar name=\"Fatima Victoria\" size=\"40\" round={true} />\n              Fatima Victoria  \n            </NavLink>                                         \n          </ListGroup.Item> \n\n          <ListGroup.Item>   \n            <NavLink to='/chat/40'>\n              <Avatar name=\"Ignacio Villeda\" size=\"40\" round={true} />\n              Ignacio Villeda  \n            </NavLink>                                         \n          </ListGroup.Item>  \n          \n        </ListGroup>              \n      </Col>\n      \n    </Row>\n  </Container>  \n  </Socket>\n);\n\nChat.propTypes = {};\n\nChat.defaultProps = {};\n\nexport default Chat;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col,Card,Button } from 'react-bootstrap';\nimport styles from './Dashboard.module.css';\n\nconst Dashboard = () => (\n  <Container className={styles.Chat}>\n  <h1>Dashboard Page</h1> \n    <Row>\n    \n      <Col xs={12} md={4} lg={4}>\n        <Card>  \n          <Card.Body>\n            <Card.Title>Card Title</Card.Title>\n            <Card.Text>\n              Some quick example text to build on the card title and make up the bulk of\n              the card's content.\n            </Card.Text>\n            <Button variant=\"primary\">Go somewhere</Button>\n          </Card.Body>\n        </Card>            \n      </Col>\n\n      <Col xs={12} md={4} lg={4}>\n        <Card>  \n          <Card.Body>\n            <Card.Title>Card Title</Card.Title>\n            <Card.Text>\n              Some quick example text to build on the card title and make up the bulk of\n              the card's content.\n            </Card.Text>\n            <Button variant=\"primary\">Go somewhere</Button>\n          </Card.Body>\n        </Card>            \n      </Col>\n\n      <Col xs={12} md={4} lg={4}>\n        <Card>  \n          <Card.Body>\n            <Card.Title>Card Title</Card.Title>\n            <Card.Text>\n              Some quick example text to build on the card title and make up the bulk of\n              the card's content.\n            </Card.Text>\n            <Button variant=\"primary\">Go somewhere</Button>\n          </Card.Body>\n        </Card>            \n      </Col>\n    </Row>\n  </Container>  \n);\n\nDashboard.propTypes = {};\n\nDashboard.defaultProps = {};\n\nexport default Dashboard;\n","import React,{useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col, ListGroup, Media, Form, Button, InputGroup, FormControl, Image,Nav} from 'react-bootstrap';\nimport styles from './ChatDetail.module.css';\nconst ChatDetail = () => (\n  <div className={styles.ChatDetail}>\n  <Nav>\n    <Nav.Item>\n      <Nav.Link href=\"/chat\">Back to chats</Nav.Link>\n    </Nav.Item>\n  </Nav>\n  <Container>\n    <Col xs={12}>\n      <Form inline>\n        <Form.Label htmlFor=\"inlineFormInputName2\" srOnly>\n          Name\n        </Form.Label>\n        <Form.Control\n          className=\"mb-2 mr-sm-2\"\n          id=\"inlineFormInputName2\"\n          placeholder=\"Type Message@=!!!\"    \n        />\n        <Form.Label htmlFor=\"inlineFormInputGroupUsername2\" srOnly>\n          Username\n        </Form.Label>\n        \n        <Button type=\"submit\" className=\"mb-2\">\n          Send\n        </Button>\n      </Form> \n    </Col>\n  </Container>\n    \n  </div>\n);\n\nChatDetail.propTypes = {};\n\nChatDetail.defaultProps = {};\n\nexport default ChatDetail;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Main.module.css';\nimport { Switch, Route } from \"react-router-dom\";\nimport Landing from \"../Landing/Landing\";\nimport Chat from \"../Chat/Chat\";\nimport Dashboard from \"../Dashboard/Dashboard\";\nimport ChatDetail from \"../ChatDetail/ChatDetail\";\n\nconst Main = () => (\n  <div className={styles.Main}>\n    <Switch>\n      <Route exact path=\"/\" component={Landing} />\n      <Route exact path=\"/chat\" component={Chat} />\n      <Route exact path=\"/chat/:id\" component={ChatDetail} />\n      <Route exact path=\"/dashboard\" component={Dashboard} />\n    </Switch>\n  </div>\n);\n\nMain.propTypes = {};\n\nMain.defaultProps = {};\n\nexport default Main;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\nimport moons from '../../moons.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Navbar, Form, Nav, FormControl, Button , Dropdown} from 'react-bootstrap';\nimport styles from './Header.module.css';\n\nconst Header = () => (\n  <div className={styles.Header}>\n  <Navbar fixed=\"top\" bg=\"#fff\" expand=\"lg\">\n  <Container>\n  <Navbar.Brand href=\"/\">\n  <img src={moons} alt='Moons Logo' />\n  </Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\"  />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n  <Nav className=\"mr-auto\">\n  <Nav.Link className={styles.Header}  href=\"/\">Home</Nav.Link>\n  <Nav.Link  className={'link'} href=\"/chat\">Chat</Nav.Link>\n  <Nav.Link href=\"/dashboard\">Dashboard</Nav.Link>      \n  </Nav>   \n  </Navbar.Collapse>\n  </Container>\n  </Navbar>    \n  </div>\n);\n\nHeader.propTypes = {};\n\nHeader.defaultProps = {};\n\nexport default Header;\n","import React from 'react';\nimport { Nav } from 'react-bootstrap';\nimport Main from './components/Main/Main';\nimport Header from './components/Header/Header';\nimport { NavLink } from \"react-router-dom\";\nimport 'font-awesome/css/font-awesome.min.css';\nimport './App.css';\n\nfunction App() {  \n  return (\n    <div className='moons-wrapper'>    \n      <Header />\n      <Main />      \n      <div id='footer-mobile' className='d-block d-sm-none'>\n      <Nav justify \n                \n        >\n          <Nav.Item>            \n            <NavLink\n            exact              \n              to='/'\n            >\n            <i className=\"fa fa-home\"></i>\n              Home\n            </NavLink>\n          </Nav.Item>\n          <Nav.Item>\n            <NavLink                \n                to='/chat'\n              >\n              <i className=\"fa fa-comments\"></i>\n                Chat\n              </NavLink>\n          </Nav.Item>\n          <Nav.Item>            \n            <NavLink                        \n              to='/dashboard'\n            >\n            <i className=\"fa fa-tachometer\"></i>\n              Dashboard\n            </NavLink>\n          </Nav.Item>          \n        </Nav>\n      </div>          \n    </div>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Landing/Landing.js","components/Dashboard/Dashboard.js","components/ChatDetail/ChatDetail.js","components/Main/Main.js","components/Header/Header.js","App.js","serviceWorker.js","webpack:///./src/index.js?b635","components/Header/Header.module.css","components/Main/Main.module.css","components/Landing/Landing.module.css","components/Dashboard/Dashboard.module.css","components/ChatDetail/ChatDetail.module.css","moons.svg"],"names":["Landing","Container","className","styles","Row","Col","xs","md","lg","options","animationData","animation","defaultProps","Dashboard","Chat","Card","Body","Title","Text","Button","variant","randomUserNumber","Math","random","toString","substring","randomColor","floor","textInput","React","createRef","username","ChatDetail","useState","name","setName","state","setState","open","setOpen","forceScroll","onClick","aria-controls","aria-expanded","Collapse","in","placeholder","ref","current","value","map","index","key","style","color","titleColor","message","fromNow","date","Form","autoComplete","inline","Label","htmlFor","srOnly","Control","id","Date","Main","exact","path","component","Header","Navbar","fixed","bg","expand","Brand","href","src","moons","alt","Toggle","Nav","Link","App","justify","Item","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.77e53eca.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Landing.module.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Lottie from 'lottie-react-web'\nimport animation from '../../welcome.json';\n\nconst Landing = () => (\n  \n    <Container className={styles.Landing}>    \n    <Row>\n    \n      <Col>\n      <h1>About Test</h1> \n      <p>This App contains the followin three routes (components):</p>\n      <ol>\n        <li>/ (Landing component)</li>\n        <li>/chat (Chat component)</li>\n        <li>/dashboard (Dashboard component)</li>\n      </ol>\n      <h3>Client Side:</h3>  \n        <ul>\n            <li>React</li>\n        </ul>\n        <h3>\n          Server Side:\n        </h3> \n        <ul>\n            <li>NodeJs</li>\n            <li>Express</li>\n            <li>Socket IO (Real time communication) </li>\n        </ul>\n\n        <h5>\n          Version Control:\n        </h5> \n        <ul>\n            <li>Git</li>            \n        </ul>\n\n        <h5>\n          Infrastructure:\n        </h5> \n        <ul>\n            <li>Heroku</li>            \n        </ul>\n      </Col>\n      <Col xs={12} md={6} lg={6}>\n      <Lottie\n        \n          options={{\n            animationData: animation,\n            \n          }}\n        />\n      </Col>\n      \n    </Row>\n    <Row>\n      \n      \n      \n    </Row>    \n    <Row>\n      \n      <Col>\n                         \n        \n     \n      </Col>\n    </Row>\n</Container>  \n);\n\nLanding.propTypes = {};\n\nLanding.defaultProps = {};\n\nexport default Landing;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col,Card,Button } from 'react-bootstrap';\nimport styles from './Dashboard.module.css';\n\nconst Dashboard = () => (\n  <Container className={styles.Chat}>\n  <h1>Dashboard Page</h1> \n    <Row>\n    \n      <Col xs={12} md={4} lg={4}>\n        <Card>  \n          <Card.Body>\n            <Card.Title>Card Title</Card.Title>\n            <Card.Text>\n              Some quick example text to build on the card title and make up the bulk of\n              the card's content.\n            </Card.Text>\n            <Button variant=\"primary\">Go somewhere</Button>\n          </Card.Body>\n        </Card>            \n      </Col>\n\n      <Col xs={12} md={4} lg={4}>\n        <Card>  \n          <Card.Body>\n            <Card.Title>Card Title</Card.Title>\n            <Card.Text>\n              Some quick example text to build on the card title and make up the bulk of\n              the card's content.\n            </Card.Text>\n            <Button variant=\"primary\">Go somewhere</Button>\n          </Card.Body>\n        </Card>            \n      </Col>\n\n      <Col xs={12} md={4} lg={4}>\n        <Card>  \n          <Card.Body>\n            <Card.Title>Card Title</Card.Title>\n            <Card.Text>\n              Some quick example text to build on the card title and make up the bulk of\n              the card's content.\n            </Card.Text>\n            <Button variant=\"primary\">Go somewhere</Button>\n          </Card.Body>\n        </Card>            \n      </Col>\n    </Row>\n  </Container>  \n);\n\nDashboard.propTypes = {};\n\nDashboard.defaultProps = {};\n\nexport default Dashboard;\n","import React, { useState } from 'react';\nimport Moment from 'react-moment';\nimport ScrollableFeed from 'react-scrollable-feed'\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col, ListGroup, Media, Form, Button,Collapse, InputGroup, FormControl, Image,Nav, Dropdown} from 'react-bootstrap';\nimport styles from './ChatDetail.module.css';\n// Creating references\nlet randomUserNumber = Math.random().toString(36).substring(5);\nlet randomColor = Math.floor(Math.random()*16777215).toString(16);\n\nlet textInput = React.createRef();\nlet username = React.createRef();\n\n\nconst ChatDetail = function() {\n  const [name, setName] = useState(randomUserNumber);  \n  const [state, setState] = useState([]);\n  const [open, setOpen] = useState(true);  \nreturn (\n  <div className={styles.ChatDetail}>  \n  <ScrollableFeed forceScroll='true'>\n  <Container>\n    <Row>\n      <Col>\n        <Button\n            onClick={() => setOpen(!open)}\n            className='pull-right'\n            aria-controls=\"example-collapse-text\"\n            aria-expanded={open}\n          >\n            Welcome User {name} <i className='fa fa-chevron-down'></i>\n        </Button>      \n      </Col>                 \n    </Row>\n\n    <Row className='nameContainer'>\n      <Collapse in={open}>    \n      <Col>\n      <input className=\"form-control\" placeholder=\"Change name...\" ref={username} />                \n          <button className='btn btn-primary btn-xs' onClick={() => {setName(username.current.value);username.current.value='';setOpen(!open)}}>Set name</button>     \n      </Col>       \n          \n      </Collapse>  \n    </Row>\n    \n    <Col className='messagesWrapper'>\n    \n          \n    {state.map((value, index) => {\n        return <div className=\"speech-bubble animated zoomIn\" key={index}>\n          <span className='userName' style={{color:'#'+value.titleColor}}>{value.username}</span> \n          <span className='message'>{value.message}</span>            \n          <Moment fromNow>{value.date}</Moment>   \n        </div>\n      })}   \n           \n    \n            \n      <Form autoComplete=\"off\" inline>\n        <Form.Label htmlFor=\"inlineFormInputName2\" srOnly>\n          Name\n        </Form.Label>\n        <Form.Control\n          className=\"mb-2 mr-sm-2\"\n          id=\"inlineFormInputName2\"\n          placeholder=\"Type message ...\"  \n          ref={textInput}             \n        />\n        <Form.Label htmlFor=\"inlineFormInputGroupUsername2\" srOnly>\n          Username\n        </Form.Label>\n        \n        <Button onClick={() => setState([...state, {\"date\":new Date(),\"titleColor\":randomColor,\"username\":name,\"message\":textInput.current.value}])} className=\"mb-2\">\n          Send\n        </Button>\n      </Form> \n    </Col>\n  </Container>\n  </ScrollableFeed>   \n  </div>\n);\n\n}  \n\n\nChatDetail.propTypes = {};\n\nChatDetail.defaultProps = {\n  \n};\n\nexport default ChatDetail;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Main.module.css';\nimport { Switch, Route } from \"react-router-dom\";\nimport Landing from \"../Landing/Landing\";\nimport Dashboard from \"../Dashboard/Dashboard\";\nimport ChatDetail from \"../ChatDetail/ChatDetail\";\n\nconst Main = () => (\n  <div className={styles.Main}>\n    <Switch>\n      <Route exact path=\"/\" component={Landing} />\n      <Route exact path=\"/chat\" component={ChatDetail} />      \n      <Route exact path=\"/dashboard\" component={Dashboard} />\n    </Switch>\n  </div>\n);\n\nMain.propTypes = {};\n\nMain.defaultProps = {};\n\nexport default Main;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\nimport moons from '../../moons.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Navbar, Form, Nav, FormControl, Button , Dropdown} from 'react-bootstrap';\nimport styles from './Header.module.css';\n\nconst Header = () => (\n  <div className={styles.Header}>\n  <Navbar fixed=\"top\" bg=\"#fff\" expand=\"lg\">\n  <Container>\n  <Navbar.Brand href=\"/\">\n  <img src={moons} alt='Moons Logo' />\n  </Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\"  />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n  <Nav className=\"mr-auto\">\n  <Nav.Link className={styles.Header}  href=\"/\">Home</Nav.Link>\n  <Nav.Link  className={'link'} href=\"/chat\">Chat</Nav.Link>\n  <Nav.Link href=\"/dashboard\">Dashboard</Nav.Link>      \n  </Nav>   \n  </Navbar.Collapse>\n  </Container>\n  </Navbar>    \n  </div>\n);\n\nHeader.propTypes = {};\n\nHeader.defaultProps = {};\n\nexport default Header;\n","import React from 'react';\nimport { Nav } from 'react-bootstrap';\nimport Main from './components/Main/Main';\nimport Header from './components/Header/Header';\nimport { NavLink } from \"react-router-dom\";\nimport 'font-awesome/css/font-awesome.min.css';\nimport './App.css';\n\nfunction App() {  \n  return (\n    <div className='moons-wrapper'>    \n      <Header />\n      <Main />      \n      <div id='footer-mobile' className='d-block d-sm-none'>\n      <Nav justify \n                \n        >\n          <Nav.Item>            \n            <NavLink\n            exact              \n              to='/'\n            >\n            <i className=\"fa fa-home\"></i>\n              Home\n            </NavLink>\n          </Nav.Item>\n          <Nav.Item>\n            <NavLink                \n                to='/chat'\n              >\n              <i className=\"fa fa-comments\"></i>\n                Chat\n              </NavLink>\n          </Nav.Item>\n          <Nav.Item>            \n            <NavLink                        \n              to='/dashboard'\n            >\n            <i className=\"fa fa-tachometer\"></i>\n              Dashboard\n            </NavLink>\n          </Nav.Item>          \n        </Nav>\n      </div>          \n    </div>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2C_Ub\",\"navbar-nav\":\"Header_navbar-nav__3Gl5W\",\"nav-link\":\"Header_nav-link__pB9ol\",\"link\":\"Header_link__2wI74\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__CYWXU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Landing\":\"Landing_Landing__3WE0r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dashboard\":\"Dashboard_Dashboard__jFBog\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatDetail\":\"ChatDetail_ChatDetail__2aUwi\"};","module.exports = __webpack_public_path__ + \"static/media/moons.e292d61b.svg\";"],"sourceRoot":""}